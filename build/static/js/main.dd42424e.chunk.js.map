{"version":3,"sources":["modules/Controls/ControlsGame.jsx","modules/Controls/ControlsVehicle.jsx","modules/PanelInfo/Legend.jsx","modules/PanelInfo/Panel.jsx","modules/planetGenerator/PlanetGame.jsx","App.js","index.js"],"names":["ControlsGame","props","className","onClick","resetGame","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","ControlsVehicle","directions","roverInfo","directionsLabels","map","direction","key","name","directionSelected","changeDirection","Legend","Panel","useState","textDirection","setTextDirection","useEffect","indexOf","pos_x","pos_y","PlanetGame","defineObstacles","areas","rockets","state","auxObstacles","min","Math","ceil","max","length","auxObs","floor","random","find","o","aux","push","setState","obstacles","createGameBoard","gameAreas","ctx","canvasRef","current","getContext","area","strokeStyle","gridColor","fillStyle","obstacleColor","fillRect","coord_x","coord_y","sizeAreaDivider","strokeRect","initialPositionRover","React","createRef","areaDivider","wide_planet","height_planet","speedMovements","planetColor","pathColor","titleApp","tableHeight","tableWidth","lastOrders","roverState","color","setVehicleDirection","bind","defineTable","setOrders","sendOrders","reset","this","tableHeightCalculated","tableWidthCalculated","createAreasMapPlanet","auxAreas","y","x","itemArea","orders","Promise","resolve","rejected","validOrders","passChecks","i","order","charAt","undefined","lastPosition","canvas","positionOk","updatePanelGame","new_x","new_y","moviment","move","controlPlanetLimits","passLimitsChecks","preventColision","passPreventColision","clearInterval","timerActionsId","position","setFocusInput","next_x","next_y","indexNextArea","count","sizeOrders","setInterval","moveRover","directionMovement","inputOrdersText","target","value","toUpperCase","checkOrders","resOrders","timerInterval","timer","timerProgressBar","didOpen","showLoading","content","getContent","b","querySelector","textContent","getTimerLeft","willClose","launchMovements","document","getElementById","focus","id","ref","height","width","placeholder","type","onChange","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dd42424e.chunk.js","sourcesContent":["import React from 'react'\r\nimport Swal from 'sweetalert2'\r\n/** Mòdul per gestionar els controls del simulador */\r\nconst ControlsGame = props =>{   \r\n\r\n    /** Funció per gestionar el diàleg de reinici del simulador */\r\n    const restartGame = () => {\r\n        const {resetGame} = props\r\n        Swal.fire({\r\n            title: 'Vols reiniciar la simulació?',\r\n            text: \"Perdràs les dades de la simulació actual\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Sí, tornem a començar!',\r\n            cancelButtonText: 'No, seguiré endavant!'\r\n          }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                resetGame(true)\r\n              Swal.fire(\r\n                'Nova simulació iniciada!',\r\n                'S\\'ha traslladat el rover a la nova posició.',\r\n                'success'\r\n              )\r\n            }\r\n          })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"cntButonsGame\">\r\n            <button\r\n            onClick={restartGame}\r\n            >            \r\n            reinicia simulació\r\n            </button>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlsGame","import React from 'react';\r\n/** Mòdul per gestionar els controls del rover */\r\nconst ControlsVehicle = props => {\r\n    const directions = props.roverInfo.directions;\r\n    const directionsLabels =props.roverInfo.directionsLabels;\r\n    /** Gestiona la solicitud de canvi de direcció del rover */\r\n    const setDirection = directionSelected => {\r\n        const {changeDirection} = props;\r\n        changeDirection(directionSelected);\r\n    }\r\n    return (\r\n        <div className=\"cntDirectionButtons\">\r\n            <div className=\"titleDirectionButtons\">direcció rover</div>\r\n            <div className=\"cntButtons\">\r\n            {\r\n                directions.map((direction,key) =>{                        \r\n                    return(\r\n                        <div className={`cntButton ${direction}`} key={key}>                                                        \r\n                                <button\r\n                                    className={directions[key] ===  props.roverInfo.direction ? `${direction} active` : `${direction}`}\r\n                                    name={directionsLabels[key]}\r\n                                    onClick={() => setDirection(`${direction}`)}                                  \r\n                                >{direction}</button>                                                                                            \r\n                            </div>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlsVehicle","import React from 'react'\r\n/** Mòdul per gestionar l'apartat llegenda */\r\nconst Legend = props => {\r\n\r\n    return (\r\n        <div className=\"cntLegend\">\r\n            <div className=\"titleLegend\">\r\n                Llegenda:\r\n            </div>\r\n            <div className=\"cntLegendItem\">\r\n                <div className=\"icoRover\"></div>\r\n                <div className=\"cntTextItemLegend\">rover</div>\r\n            </div>\r\n            <div className=\"cntLegendItem\">\r\n                <div className=\"icoObstacle\"></div>\r\n                <div className=\"cntTextItemLegend\">obstacle</div>\r\n            </div>\r\n            <div className=\"cntLegendItem\">\r\n                <div className=\"icoCasella\"></div>\r\n                <div className=\"cntTextItemLegend\">casella 5 metres</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend","import React,{useEffect, useState} from 'react'\r\nimport Legend from './Legend'\r\n/** Mòdul per gestionar el panell d'informació del simulador */\r\nconst Panel = props => {\r\n    const [textDirection,setTextDirection] = useState('');\r\n    useEffect(()=>{\r\n        const {roverInfo} = props\r\n        if(roverInfo){\r\n            setTextDirection(roverInfo.directionsLabels[roverInfo.directions.indexOf(roverInfo.direction)]);\r\n        }\r\n    },[props])\r\n    return (\r\n        <div className=\"cntPanelInfo\">\r\n            <div className=\"itemInfo\">\r\n                <div className=\"title\">Direcció: </div>\r\n                <div className=\"value\">{textDirection}</div>\r\n            </div>\r\n            <div className=\"itemInfo\">\r\n                <div className=\"title\">Ubicació(X): </div>\r\n                <div className=\"value\">{props.roverInfo.pos_x/2}</div>\r\n            </div>\r\n            <div className=\"itemInfo\">\r\n            <div className=\"title\">Ubicació(Y): </div>\r\n                <div className=\"value\">{props.roverInfo.pos_y/2}</div>\r\n            </div>\r\n            <Legend {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Panel","import React,{Component} from 'react'\nimport Swal from 'sweetalert2'\nimport ControlsGame from './../Controls/ControlsGame'\nimport ControlsVehicle from './../Controls/ControlsVehicle'\nimport PanelInfo from './../PanelInfo/Panel'\nimport './planetStyles.css'\n\n/** Mòdul principal del simulador */\nclass PlanetGame extends Component {\n    constructor(){\n        super();\n        this.canvasRef = React.createRef();\n        this.areaDivider = 5; // àrea per la divisió del planeta en cel·les        \n        this.wide_planet = 200;\n        this.height_planet = 200;            \n        this.sizeAreaDivider = 10; // mida de la cel·la en px\n        this.speedMovements = 200;\n        this.obstacleColor = 'red';\n        this.gridColor = 'green'\n        this.planetColor = 'brown';\n        this.pathColor = 'brown'; // definir color en cas de voler deixar un rastre del camí del rover        \n        this.state = {\n            titleApp: 'Mars Rover Mission',\n            wide_planet: this.wide_planet / this.areaDivider, \n            height_planet: this.height_planet/ this.areaDivider,\n            rockets: 50, // número d'obstacles            \n            tableHeight: 0,\n            tableWidth: 0,                        \n            areas: [],\n            obstacles: [],            \n            lastOrders: '',\n            roverState:{\n                direction: 'N',\n                pos_x: 0,\n                pos_y: 0,\n                color: '#000',                \n                directions: ['N','W','E','S'],\n                directionsLabels: ['Nord','Oest','Est','Sud']\n            }\n        }\n\n        this.setVehicleDirection = this.setVehicleDirection.bind(this);\n        this.defineTable = this.defineTable.bind(this);\n        this.setOrders = this.setOrders.bind(this);\n        this.sendOrders = this.sendOrders.bind(this);\n    }\n    /**\n     * Crea el taulell del simulador.\n     * \n     * @param reset - assigna la opció de reinici del simulador\n     */\n    defineTable(reset=false){\n        if(reset){\n            let {roverState} = this.state;\n            roverState.direction = 'N';\n            this.setState({roverState})\n        }\n        let tableHeightCalculated = this.height_planet * 2 + (this.sizeAreaDivider*2);\n        let tableWidthCalculated = this.wide_planet * 2 + (this.sizeAreaDivider*2);\n        this.setState({\n            ...this.state,\n            tableHeight: tableHeightCalculated,\n            tableWidth: tableWidthCalculated\n        }, () => {\n            const canvas = this.canvasRef.current;\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = this.planetColor;              \n            ctx.fillRect(0, 0, tableHeightCalculated, tableWidthCalculated)   \n            this.createAreasMapPlanet();\n        });\n    }\n        \n    /**\n     * Definim les areas que composen el taulell de simulació 200x200\n     * cada quadre equival a 5x5m de planeta 40x40\n     * \n     * En base al número d'àreas treiem els obstacles aleatoris controlats per la variable del simulador roverState (rockets)\n     * @param areas \n     */\n    defineObstacles = (areas) => {\n        const {rockets} = this.state\n        let auxObstacles = [];\n        \n            for (let aux = 0; aux < rockets;aux++){\n                let min = Math.ceil(0);\n                let max = areas.length;            \n                let auxObs = Math.floor(Math.random() * (max - min + 1)) + min;\n                let locateObstacle = auxObstacles.find(o => o === auxObs);\n                \n                if (!locateObstacle ){\n                    auxObstacles.push(auxObs)\n                }else{\n                    aux--;\n                }\n            }           \n            this.setState({\n                ...this.state,\n                obstacles: auxObstacles\n            }, () => {\n                this.createGameBoard(areas)\n            })\n    }\n    \n    /** Defineix les areas del taulell de simulació */\n    createAreasMapPlanet(){\n        const {tableHeight, tableWidth} = this.state\n        let auxAreas = [];\n        for(let y = this.sizeAreaDivider; y < tableHeight - this.sizeAreaDivider; y = y + this.sizeAreaDivider){\n            for(let x = this.sizeAreaDivider; x < tableWidth - this.sizeAreaDivider; x = x + this.sizeAreaDivider){\n                \n                let itemArea = {\n                    coord_x: x,\n                    coord_y: y                    \n                }       \n                auxAreas.push(itemArea)     \n                \n            }            \n        }\n\n        this.setState({\n            ...this.state,\n            areas: auxAreas\n        }, () => {\n            this.defineObstacles(auxAreas)\n        })       \n\n    }\n\n    /**\n     * Comprova les ordres introduïdes\n     * @param {*} orders string amb les ordres entrades per l'usuari\n     */\n    checkOrders(orders){\n        let {lastOrders} = this.state\n        return new Promise ((resolve,rejected) => {\n            if(orders === ''){\n                resolve(false)\n            }\n            let validOrders = ['F','R','L']\n            let passChecks = true;\n            for (let i = 0; i < orders.length; i++){                \n                let order = orders.charAt(i);\n                let passFilterOrders = validOrders.find(x => x === order);                \n                if(passFilterOrders === undefined){ //&& passFilterOrders                    \n                    passChecks = false;\n                }            \n                \n            }\n            if(passChecks){\n                lastOrders = orders    \n                this.setState({\n                    ...this.state,\n                    lastOrders\n                }, () => {\n                    resolve(passChecks);\n                })\n            }else{\n                resolve(passChecks);\n            }\n\n        })\n    }\n        \n    /**\n    * Crea el taulell de simulació i els obstacles generats \n    * @param {*} gameAreas array amb les àrees que componen el planeta\n    */\n    createGameBoard = (gameAreas) => {\n        const {obstacles} = this.state\n        let canvas = this.canvasRef.current;\n        let ctx = canvas.getContext('2d');\n\n        gameAreas.map((area,key) => {            \n            ctx.strokeStyle = this.gridColor;        \n            let auxObstacle = obstacles.find(o => o === key)               \n            if(auxObstacle){\n                ctx.fillStyle = this.obstacleColor;                    \n                ctx.fillRect(area.coord_x,area.coord_y,this.sizeAreaDivider,this.sizeAreaDivider)\n            }else{\n                ctx.strokeRect(area.coord_x,area.coord_y,this.sizeAreaDivider,this.sizeAreaDivider)                    \n                } \n        })\n        this.initialPositionRover();\n    }\n    \n    /**\n    * Actualitza el taulell de simulació amb la posicio del rover\n    * @param {*} roverState - dades actuals del rover\n    * @param {*} lastPosition - última posicio vàlida del rover, dona la possibilitat de pintar el camí recorregut del rover, \n    */\n    updatePanelGame(roverState,lastPosition = false){        \n        let canvas = this.canvasRef.current;\n        let ctx = canvas.getContext('2d');\n        \n        ctx.fillStyle = roverState.color;\n        ctx.fillRect(roverState.pos_x,roverState.pos_y,this.sizeAreaDivider,this.sizeAreaDivider)\n        /** Opció per dibuixar el rastre del rover */\n        if(lastPosition){\n            ctx.fillStyle = this.pathColor;                    \n            ctx.strokeStyle = this.gridColor;\n            ctx.fillRect(lastPosition.pos_x,lastPosition.pos_y,this.sizeAreaDivider,this.sizeAreaDivider)\n            ctx.strokeRect(lastPosition.pos_x,lastPosition.pos_y,this.sizeAreaDivider,this.sizeAreaDivider)\n        }        \n    }\n\n    /** Posiciona el rover en el punt de sortida */\n    initialPositionRover(){\n        let {roverState, obstacles, areas} = this.state;\n\n        let min = Math.ceil(0);\n        let max = areas.length;            \n        let positionOk = 0;\n        \n        do{\n            let auxObs = Math.floor(Math.random() * (max - min + 1)) + min;\n            let locateObstacle = obstacles.find(o => o === auxObs);\n            if (!locateObstacle){                \n                positionOk = auxObs                \n            }            \n        }while(positionOk === 0)\n\n        if(areas[positionOk]){\n            roverState.pos_y = areas[positionOk].coord_y;\n            roverState.pos_x = areas[positionOk].coord_x; \n        }\n\n        /** correccio de la direcció inicial en cas de limit superior \n         * per que no quedi a ran dels limits del planeta\n        */       \n        if(roverState.pos_y === 10){\n            roverState.pos_y += this.sizeAreaDivider;\n            roverState.direction = 'S'\n        }else if(roverState.pos_y === 400){\n            roverState.pos_y -= this.sizeAreaDivider;\n            roverState.direction = 'N'\n        }\n\n        if(roverState.pos_x === 10){\n            roverState.pos_x += this.sizeAreaDivider;            \n        }else if(roverState.pos_x === 400){\n            roverState.pos_x -= this.sizeAreaDivider;            \n        }\n\n        /**  Actualiza dades i crida al següent pas */\n        this.setState({\n            ...this.state,\n            roverState\n        }, () => this.updatePanelGame(roverState))\n\n    }\n\n    \n    /**\n     * Funció per gestionar el moviment del rover tenin en compte la direcció actual del vehicle.\n     * @param {*} move - Clau del moviment seleccionat per l'usuari\n     */\n    moveRover(move = ''){        \n        let lastPosition = {}\n        let {roverState,obstacles} = this.state\n        \n        /** Guardat de les posicions actuals del rover abans de gestionar el moviment */\n        lastPosition.pos_x = roverState.pos_x;\n        lastPosition.pos_y = roverState.pos_y;                \n        /* Avaluació de les accions en base a la direcció actual del rover */\n        let new_x,new_y,moviment;\n        switch(roverState.direction){\n            case 'N':               \n               /* Avaluació de les accions en base al moviment solicitat */\n                switch(move){\n                    case 'F':                     \n                        new_y = roverState.pos_y - this.sizeAreaDivider;\n                        new_x = roverState.pos_x;\n                        moviment = 'frontal'\n                        break;\n                    case 'L':                    \n                        new_x = roverState.pos_x - this.sizeAreaDivider;\n                        new_y = roverState.pos_y;\n                        moviment = 'cap a l\\'esquerra'\n                        break;\n                    case 'R':\n                        new_x = roverState.pos_x + this.sizeAreaDivider;\n                        new_y = roverState.pos_y;\n                        moviment = 'cap a la dreta'\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'S':                     \n                switch(move){\n                    case 'F':\n                        new_y = roverState.pos_y  + this.sizeAreaDivider;\n                        new_x = roverState.pos_x;\n                        moviment = 'frontal'\n                        break;\n                    case 'L':                    \n                        new_x = roverState.pos_x + this.sizeAreaDivider;\n                        new_y = roverState.pos_y;\n                        moviment = 'cap a l\\'esquerra'\n                        break;\n                    case 'R':\n                        new_x = roverState.pos_x - this.sizeAreaDivider;\n                        new_y = roverState.pos_y;\n                        moviment = 'cap a la dreta'\n                        break;\n                    default:\n                        break;                        \n                }     \n                    break;                       \n            case 'E':                \n                switch(move){\n                    case 'F':\n                        new_y = roverState.pos_y;\n                        new_x = roverState.pos_x + this.sizeAreaDivider;\n                        moviment = 'frontal'\n                        break;\n                    case 'L':                    \n                        new_x = roverState.pos_x;\n                        new_y = roverState.pos_y - this.sizeAreaDivider;\n                        moviment = 'cap a l\\'esquerra'\n                        break;\n                    case 'R':\n                        new_x = roverState.pos_x;\n                        new_y = roverState.pos_y + this.sizeAreaDivider;\n                        moviment = 'cap a la dreta'\n                        break;\n                    default:\n                        break;\n                    }                       \n                break;           \n            case 'W':\n                switch(move){\n                    case 'F':\n                        new_y = roverState.pos_y;\n                        new_x = roverState.pos_x - this.sizeAreaDivider;\n                        moviment = 'frontal'\n                        break;\n                    case 'L':                    \n                        new_x = roverState.pos_x;\n                        new_y = roverState.pos_y + this.sizeAreaDivider;\n                        moviment = 'cap a l\\'esquerra'\n                        break;\n                    case 'R':\n                        new_x = roverState.pos_x;\n                        new_y = roverState.pos_y - this.sizeAreaDivider;\n                        moviment = 'cap a la dreta'\n                        break;\n                    default:\n                        break;\n                }                        \n                break;\n            default:\n                break;\n        }\n        \n        /**\n        * Fem els controls de posició per evitar colisions o sortides dels limits\n        * @param {*} next_x - propera posicio X del rover\n        * @param {*} next_y - propera posicio Y del rover    \n        */\n        this.controlPlanetLimits(new_x,new_y)\n            .then(passLimitsChecks =>{\n                if(passLimitsChecks){                          \n                    /** No hi ha risc de sortida dels límits */  \n                    this.preventColision(new_x,new_y,obstacles)\n                        .then(passPreventColision =>{\n                            if(passPreventColision){\n                                /** No hi ha risc de colisió */\n                                roverState.pos_y = new_y;\n                                roverState.pos_x = new_x;\n                                this.setState({\n                                    ...this.state,\n                                    roverState\n                                }, this.updatePanelGame(roverState,lastPosition) )\n                            }else{\n                                /** Colisio detectada */\n                                clearInterval(this.timerActionsId)\n                                Swal.fire({\n                                    icon: 'error',\n                                    title: 'Ups...',\n                                    text: `S'ha evitat un accident, s'ha trobat un obstacle en l'últim moviment ${moviment} !`,\n                                    position: 'top-end',\n                                })\n                                .then(result =>{\n                                    this.setFocusInput();\n                                })\n                            }\n                                })\n                }else{\n                    /** Sortida dels límits detectada */\n                    clearInterval(this.timerActionsId)\n                        Swal.fire({\n                            icon: 'info',\n                            title: 'Ups...',\n                            text: `Has arribat als límits del planeta, en l'últim moviment ${moviment}, la seqüència s'ha avortat! Pots canviar la direcció del rover per tornar enrere.`,\n                            position: 'top-end',\n                            })\n                            .then(result =>{\n                                this.setFocusInput();                                \n                            })\n                }                        \n            })\n    }\n\n    \n    /**\n    * Funcio de control per evitar sortir dels limits del planeta\n    * @param {*} next_x - propera posicio X del rover\n    * @param {*} next_y - propera posicio Y del rover    \n    */\n    controlPlanetLimits(next_x,next_y){\n        return new Promise((resolve,rejected) => {\n            if(next_x < 10 || next_x > 400 || next_y < 10 || next_y > 400){\n                resolve(false);\n            }else{\n                resolve(true);\n            }\n        })\n    }\n    \n    \n    /**\n    * Funcio de control per evitar colisionar amb els obstacles del planeta \n    * @param {*} next_x - propera posicio X del rover\n    * @param {*} next_y - propera posicio Y del rover\n    * @param {*} obstacles - array obstacles generats\n    */\n    preventColision(next_x,next_y,obstacles){\n        let {areas} = this.state\n        return new Promise((resolve,rejected) => {\n            let indexNextArea = areas.indexOf(areas.find(x => x.coord_x === next_x && x.coord_y === next_y));\n            let posObstacle = obstacles.find(x => x === indexNextArea)\n            if(!posObstacle){\n                resolve(true);\n            }else{\n                resolve(false);\n            }\n        })\n    }\n\n    /** Funció per gestionar les ordres rebudes i llançar els moviments del rover */\n    launchMovements(orders){\n        let count = 0;\n        let sizeOrders = orders.length;                \n        this.timerActionsId = setInterval(() => {\n            this.moveRover(orders.charAt(count))\n            count++;\n            /** Control de sortida del temporitzador un cop finalitzades les ordres */\n            if(count === sizeOrders){\n                clearInterval(this.timerActionsId)                                \n                this.setState({\n                    ...this.state,\n                    lastOrders:''\n                })\n                this.setFocusInput();\n            }\n          }, this.speedMovements);          \n    }\n\n    /** Funció per gestionar el canvi de direcció del rover */\n    setVehicleDirection(directionMovement) {\n        let {roverState} = this.state\n        roverState.direction = directionMovement;\n        this.setState({\n            ...this.state,\n            roverState            \n        })\n    }\n\n    /** Gestiona el contingut de les ordres que entra l'usuari\n     *  \n     */\n    setOrders(inputOrdersText){               \n        let textOrders = inputOrdersText.target.value\n        let lastOrders = textOrders.toUpperCase();        \n        this.setState({\n            ...this.state,\n            lastOrders\n        })\n        \n    }\n    /** Funció que envia les ordres introduïdes */\n    sendOrders(){\n        let {lastOrders} = this.state\n        this.checkOrders(lastOrders)\n                .then(resOrders => {\n                    if(resOrders === true){                        \n                        let timerInterval;\n                        Swal.fire({\n                            title: 'Transmetent ordres al rover',                            \n                            timer: 1000,\n                            timerProgressBar: true,\n                            position: 'bottom',\n                            didOpen: () => {\n                            Swal.showLoading()\n                            timerInterval = setInterval(() => {\n                                const content = Swal.getContent()\n                                if (content) {\n                                const b = content.querySelector('b')\n                                if (b) {\n                                    b.textContent = Swal.getTimerLeft()\n                                }\n                                }\n                            }, 100)\n                            },\n                            willClose: () => {\n                            clearInterval(timerInterval)\n                            }\n                        }).then(() => {\n                            this.launchMovements(lastOrders);                                                  \n                        })\n                    }else{\n                        Swal.fire({\n                            icon: 'error',\n                            title: 'Ups...',\n                            text: 'No s\\'han entrat ordres vàlides',\n                            position: 'top',\n                            \n                          })\n                          .then(result =>{\n                            this.setState({\n                                ...this.state,                                \n                                lastOrders:''                                \n                            });\n                            this.setFocusInput();\n                        })\n                    }\n                })\n    }\n\n    /* Funció que selecciona el focus a la caixa d'entrada d'ordres */\n    setFocusInput(){\n        document.getElementById(\"inputOrders\").focus();\n    }\n    \n    /** Funció que engega el simulador */\n    componentDidMount(){        \n        this.defineTable();   \n        this.setFocusInput();        \n    }\n\n    render(){    \n        const {roverState, titleApp, lastOrders, tableHeight, tableWidth } = this.state           \n            return (\n                <div className=\"cntPlanetGame\">                    \n                <div className=\"cntGame\">\n                    <div className=\"titleGame\">{`${titleApp} - ${this.wide_planet}x${this.height_planet}m`}</div>\n                    <canvas id=\"canvas\" ref={this.canvasRef} height={`${tableHeight}px`} width={`${tableWidth}px`} />                    \n                </div>\n                <div className=\"cntControls\">\n                    <div className=\"cntInputOrders\">\n                        <input placeholder=\"esperant instruccions\" id=\"inputOrders\" name=\"lastOrders\" type=\"text\" value={lastOrders} onChange={this.setOrders}/>\n                        <button name=\"sendOrders\" type=\"button\" onClick={this.sendOrders} >enviar instruccions</button>\n                    </div>           \n                    <div className=\"cntInstructions\">\n                        <div>F: Davant | L: Esquerra | R: Dreta</div>\n                    </div>\n                    <div className=\"PanelsVehicle\">\n                        <PanelInfo roverInfo={roverState}/>\n                        <ControlsVehicle roverInfo={roverState}  changeDirection={this.setVehicleDirection} />\n                    </div>\n                    <ControlsGame resetGame={this.defineTable}/>\n                </div>\n                </div>\n            )        \n    }\n    \n}\n\nexport default PlanetGame","import React from 'react'\nimport './App.css';\nimport PlanetGame from './modules/planetGenerator/PlanetGame'\n/* Mòdul principal del simulador, carrega el component PlanetGame que carrega la resta de components necessaris */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PlanetGame />      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n/** Càrrega del mòdul principal de l'aplicació */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}